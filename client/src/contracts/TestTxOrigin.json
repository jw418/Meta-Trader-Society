{
  "contractName": "TestTxOrigin",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RatRaceNFT",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "testMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RatRaceNFT\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"testMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Julien Wolff Tristan Boettger   \",\"kind\":\"dev\",\"methods\":{\"testMint(address,uint256)\":{\"params\":{\"_address\":\"addres du SC RatRaceNFT.sol\",\"_amount\":\"qty to mint\"}}},\"title\":\"Contract testTxOrigin   \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"testMint(address,uint256)\":{\"notice\":\"this fonction test a require in RatRaceNFT.sol  \"}},\"notice\":\"this is a test contract. It tests the require tx.origin == msg.sender    of the mintNFT function of our smart contract RatRaceNFT.sol \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/TestTxOrigin.sol\":\"TestTxOrigin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e12cbaa7378fd9b62280e4e1d164bedcb4399ce238f5f98fc0eefb7e50577981\",\"dweb:/ipfs/QmXRoFGUgfsaRkoPT5bxNMtSayKTQ8GZATLPXf69HcRA51\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4632c341a06ba5c079b51ca5a915efab4e6ab57735b37839b3e8365ff806a43e\",\"dweb:/ipfs/QmTHT3xHYed2wajEoA5qu7ii2BxLpPhQZHwAhtLK5Z7ANK\"]},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0x921f012325281f7d81e29c53a13824cf6c2c5d77232065d0d4f3f912e97af6ea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7dbcedc364fce0ab5e54d21d4cbd91a97959f52c0674cf5c36a314bb58308f62\",\"dweb:/ipfs/QmfYpqHKtu3bSQ9FGvLwzdxRNykStpVPtoLNTaM1KBKj6E\"]},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://77724cecdfba8814632ab58737c2b0f2d4ad2d532bc614aee559b5593c1152f0\",\"dweb:/ipfs/QmUcE6gXyv7CQh4sUdcDABYKGTovTe1zLMZSEq95nkc3ph\"]},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://afbedcf17f31db719e6fdc56caa8f458799c5fa2eb94cb1e94ef18f89af85768\",\"dweb:/ipfs/QmVmqRdBfbgYThpZSoAJ5o9mnAMjx8mCHHjv3Rh8cQAAg3\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://26fef835622b46a5ba08b3ef6b46a22e94b5f285d0f0fb66b703bd30217d2c34\",\"dweb:/ipfs/QmZ548qdwfL1qF7aXz3xh1GCdTiST81kGGuKRqVUfYmPZR\"]},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a0a107160525724f9e1bbbab031defc2f298296dd9e331f16a6f7130cec32146\",\"dweb:/ipfs/QmemujxSd7gX8A9M8UwmNbz4Ms3U9FG9QfudUgxwvTmPWf\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b3a57d0854b2fdce6ebff933a48dca2445643d1eccfc27f00292e937f26c6a58\",\"dweb:/ipfs/QmW45rZooS9TqR4YXUbjRbtf2Bpb5ouSarBvfW1LdGprvV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8179c356adb19e70d6b31a1eedc8c5c7f0c00e669e2540f4099e3844c6074d30\",\"dweb:/ipfs/QmWFbivarEobbqhS1go64ootVuHfVohBseerYy9FTEd1W2\"]},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"project:/contracts/PayementSpliter.sol\":{\"keccak256\":\"0x0e2d0ae1d5c477ca5fd1e3b82ec42ae8fecab79b81a2f1a5458afad059d37a8d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://813f14360481a476cb9128a74b255966acc687ba6166c7622bdbb05b3838efa1\",\"dweb:/ipfs/QmSUM1WVK5NBCtcCqMUAoBAbwUHzaBdqh5mWCUFhZBtNBa\"]},\"project:/contracts/RatRaceNFT.sol\":{\"keccak256\":\"0x01a2331f2d0a53d510feeb4bfe9ccd92c6947953ff72322ff71a73619cdd31f8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://19bdf7329a52378770e342b3e8f5cb4607acdc44900a95fc0f46dab11c23823d\",\"dweb:/ipfs/QmXUrR3sK8fAbpXAGcHyLUynG6ZB6vKfpqws28J7VnyaxA\"]},\"project:/contracts/TestTxOrigin.sol\":{\"keccak256\":\"0x0b353830ab12255b85688f60a72977a2f6715f0d83cd442d70b428ae77903ec3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://27530cff46c850e1c8f02d920c62f324dacf848fcc911b04d1724e794a24eda8\",\"dweb:/ipfs/QmdMw8y7Wy2F9EbjyaAgX9dscp4jxUh5oPGnLZyxobfMbT\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060fa8061001f6000396000f3fe608060405260043610601c5760003560e01c8063f28e093d146021575b600080fd5b6030602c366004608e565b6032565b005b60405163249909d160e21b8152600481018290526001600160a01b03831690639264274490602401600060405180830381600087803b158015607357600080fd5b505af11580156086573d6000803e3d6000fd5b505050505050565b6000806040838503121560a057600080fd5b82356001600160a01b038116811460b657600080fd5b94602093909301359350505056fea264697066735822122069a0612fe47c47016f3e82338a8e73b035950c2b3884f50ac6b4d811aaee268164736f6c634300080d0033",
  "deployedBytecode": "0x608060405260043610601c5760003560e01c8063f28e093d146021575b600080fd5b6030602c366004608e565b6032565b005b60405163249909d160e21b8152600481018290526001600160a01b03831690639264274490602401600060405180830381600087803b158015607357600080fd5b505af11580156086573d6000803e3d6000fd5b505050505050565b6000806040838503121560a057600080fd5b82356001600160a01b038116811460b657600080fd5b94602093909301359350505056fea264697066735822122069a0612fe47c47016f3e82338a8e73b035950c2b3884f50ac6b4d811aaee268164736f6c634300080d0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:571:18",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:18",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "120:267:18",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "166:16:18",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "175:1:18",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "178:1:18",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "168:6:18"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "168:12:18"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "168:12:18"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "141:7:18"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "150:9:18"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "137:3:18"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "137:23:18"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "162:2:18",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "133:3:18"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "133:32:18"
                  },
                  "nodeType": "YulIf",
                  "src": "130:52:18"
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "191:36:18",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "217:9:18"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "204:12:18"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "204:23:18"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "195:5:18",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "290:16:18",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "299:1:18",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "302:1:18",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "292:6:18"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "292:12:18"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "292:12:18"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "249:5:18"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "260:5:18"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "275:3:18",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "280:1:18",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "271:3:18"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "271:11:18"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "284:1:18",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "267:3:18"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "267:19:18"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "256:3:18"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "256:31:18"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "246:2:18"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "246:42:18"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "239:6:18"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "239:50:18"
                  },
                  "nodeType": "YulIf",
                  "src": "236:70:18"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "315:15:18",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "325:5:18"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "315:6:18"
                    }
                  ]
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "339:42:18",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "366:9:18"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "377:2:18",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "362:3:18"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "362:18:18"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "349:12:18"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "349:32:18"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "339:6:18"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_contract$_RatRaceNFT_$3354t_uint256",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "78:9:18",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "89:7:18",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "101:6:18",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "109:6:18",
                "type": ""
              }
            ],
            "src": "14:373:18"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "493:76:18",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "503:26:18",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "515:9:18"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "526:2:18",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "511:3:18"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "511:18:18"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "503:4:18"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "545:9:18"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "556:6:18"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "538:6:18"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "538:25:18"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "538:25:18"
                }
              ]
            },
            "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "462:9:18",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "473:6:18",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "484:4:18",
                "type": ""
              }
            ],
            "src": "392:177:18"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_contract$_RatRaceNFT_$3354t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
      "id": 18,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "348:347:17:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "348:347:17:-:0;;;;;;;;;;;;;;;;;;;;;568:124;;;;;;:::i;:::-;;:::i;:::-;;;659:25;;-1:-1:-1;;;659:25:17;;;;;538::18;;;-1:-1:-1;;;;;659:16:17;;;;;511:18:18;;659:25:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;568:124;;:::o;14:373:18:-;101:6;109;162:2;150:9;141:7;137:23;133:32;130:52;;;178:1;175;168:12;130:52;204:23;;-1:-1:-1;;;;;256:31:18;;246:42;;236:70;;302:1;299;292:12;236:70;325:5;377:2;362:18;;;;349:32;;-1:-1:-1;;;14:373:18:o",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport \"./RatRaceNFT.sol\"; \r\n\r\n/**\r\n*   @title Contract testTxOrigin\r\n*   \r\n*   @author Julien Wolff Tristan Boettger\r\n*   \r\n*   @notice this is a test contract. It tests the require tx.origin == msg.sender \r\n*   of the mintNFT function of our smart contract RatRaceNFT.sol \r\n*/\r\ncontract TestTxOrigin {    \r\n    /** \r\n    *   @notice this fonction test a require in RatRaceNFT.sol  \r\n    *\r\n    *   @param _address addres du SC RatRaceNFT.sol\r\n    *\r\n    *   @param _amount qty to mint\r\n    */\r\n    function testMint(RatRaceNFT _address, uint256 _amount) external payable {        \r\n       _address.mintNFT(_amount);\r\n    }\r\n}\r\n",
  "sourcePath": "E:\\Projet Final\\Meta-Trader-Society\\contracts\\TestTxOrigin.sol",
  "ast": {
    "absolutePath": "project:/contracts/TestTxOrigin.sol",
    "exportedSymbols": {
      "Address": [
        2097
      ],
      "Context": [
        2119
      ],
      "ERC165": [
        2346
      ],
      "ERC721": [
        1272
      ],
      "ERC721Enumerable": [
        1744
      ],
      "IERC165": [
        2358
      ],
      "IERC20": [
        182
      ],
      "IERC721": [
        1388
      ],
      "IERC721Enumerable": [
        1775
      ],
      "IERC721Metadata": [
        1802
      ],
      "IERC721Receiver": [
        1406
      ],
      "Ownable": [
        104
      ],
      "PaymentSplitter": [
        2865
      ],
      "RatRaceNFT": [
        3354
      ],
      "SafeERC20": [
        406
      ],
      "Strings": [
        2322
      ],
      "TestTxOrigin": [
        3375
      ]
    },
    "id": 3376,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3356,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:17"
      },
      {
        "absolutePath": "project:/contracts/RatRaceNFT.sol",
        "file": "./RatRaceNFT.sol",
        "id": 3357,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3376,
        "sourceUnit": 3355,
        "src": "68:26:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "TestTxOrigin",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3358,
          "nodeType": "StructuredDocumentation",
          "src": "99:247:17",
          "text": "   @title Contract testTxOrigin\n   \n   @author Julien Wolff Tristan Boettger\n   \n   @notice this is a test contract. It tests the require tx.origin == msg.sender \n   of the mintNFT function of our smart contract RatRaceNFT.sol "
        },
        "fullyImplemented": true,
        "id": 3375,
        "linearizedBaseContracts": [
          3375
        ],
        "name": "TestTxOrigin",
        "nameLocation": "357:12:17",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3373,
              "nodeType": "Block",
              "src": "641:51:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3370,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3364,
                        "src": "676:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 3367,
                        "name": "_address",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3362,
                        "src": "659:8:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RatRaceNFT_$3354",
                          "typeString": "contract RatRaceNFT"
                        }
                      },
                      "id": 3369,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mintNFT",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3309,
                      "src": "659:16:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) payable external"
                      }
                    },
                    "id": 3371,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "659:25:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3372,
                  "nodeType": "ExpressionStatement",
                  "src": "659:25:17"
                }
              ]
            },
            "documentation": {
              "id": 3359,
              "nodeType": "StructuredDocumentation",
              "src": "381:181:17",
              "text": "   @notice this fonction test a require in RatRaceNFT.sol  \n   @param _address addres du SC RatRaceNFT.sol\n   @param _amount qty to mint"
            },
            "functionSelector": "f28e093d",
            "id": 3374,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testMint",
            "nameLocation": "577:8:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3365,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3362,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "597:8:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 3374,
                  "src": "586:19:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_RatRaceNFT_$3354",
                    "typeString": "contract RatRaceNFT"
                  },
                  "typeName": {
                    "id": 3361,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3360,
                      "name": "RatRaceNFT",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3354,
                      "src": "586:10:17"
                    },
                    "referencedDeclaration": 3354,
                    "src": "586:10:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_RatRaceNFT_$3354",
                      "typeString": "contract RatRaceNFT"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3364,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "615:7:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 3374,
                  "src": "607:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3363,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "607:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "585:38:17"
            },
            "returnParameters": {
              "id": 3366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "641:0:17"
            },
            "scope": 3375,
            "src": "568:124:17",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3376,
        "src": "348:347:17",
        "usedErrors": []
      }
    ],
    "src": "33:664:17"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/TestTxOrigin.sol",
    "exportedSymbols": {
      "Address": [
        2097
      ],
      "Context": [
        2119
      ],
      "ERC165": [
        2346
      ],
      "ERC721": [
        1272
      ],
      "ERC721Enumerable": [
        1744
      ],
      "IERC165": [
        2358
      ],
      "IERC20": [
        182
      ],
      "IERC721": [
        1388
      ],
      "IERC721Enumerable": [
        1775
      ],
      "IERC721Metadata": [
        1802
      ],
      "IERC721Receiver": [
        1406
      ],
      "Ownable": [
        104
      ],
      "PaymentSplitter": [
        2865
      ],
      "RatRaceNFT": [
        3354
      ],
      "SafeERC20": [
        406
      ],
      "Strings": [
        2322
      ],
      "TestTxOrigin": [
        3375
      ]
    },
    "id": 3376,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3356,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:17"
      },
      {
        "absolutePath": "project:/contracts/RatRaceNFT.sol",
        "file": "./RatRaceNFT.sol",
        "id": 3357,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 3376,
        "sourceUnit": 3355,
        "src": "68:26:17",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "TestTxOrigin",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 3358,
          "nodeType": "StructuredDocumentation",
          "src": "99:247:17",
          "text": "   @title Contract testTxOrigin\n   \n   @author Julien Wolff Tristan Boettger\n   \n   @notice this is a test contract. It tests the require tx.origin == msg.sender \n   of the mintNFT function of our smart contract RatRaceNFT.sol "
        },
        "fullyImplemented": true,
        "id": 3375,
        "linearizedBaseContracts": [
          3375
        ],
        "name": "TestTxOrigin",
        "nameLocation": "357:12:17",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 3373,
              "nodeType": "Block",
              "src": "641:51:17",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 3370,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3364,
                        "src": "676:7:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 3367,
                        "name": "_address",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3362,
                        "src": "659:8:17",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_RatRaceNFT_$3354",
                          "typeString": "contract RatRaceNFT"
                        }
                      },
                      "id": 3369,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "mintNFT",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3309,
                      "src": "659:16:17",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256) payable external"
                      }
                    },
                    "id": 3371,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "659:25:17",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3372,
                  "nodeType": "ExpressionStatement",
                  "src": "659:25:17"
                }
              ]
            },
            "documentation": {
              "id": 3359,
              "nodeType": "StructuredDocumentation",
              "src": "381:181:17",
              "text": "   @notice this fonction test a require in RatRaceNFT.sol  \n   @param _address addres du SC RatRaceNFT.sol\n   @param _amount qty to mint"
            },
            "functionSelector": "f28e093d",
            "id": 3374,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "testMint",
            "nameLocation": "577:8:17",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3365,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3362,
                  "mutability": "mutable",
                  "name": "_address",
                  "nameLocation": "597:8:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 3374,
                  "src": "586:19:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_RatRaceNFT_$3354",
                    "typeString": "contract RatRaceNFT"
                  },
                  "typeName": {
                    "id": 3361,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 3360,
                      "name": "RatRaceNFT",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3354,
                      "src": "586:10:17"
                    },
                    "referencedDeclaration": 3354,
                    "src": "586:10:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_RatRaceNFT_$3354",
                      "typeString": "contract RatRaceNFT"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3364,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "615:7:17",
                  "nodeType": "VariableDeclaration",
                  "scope": 3374,
                  "src": "607:15:17",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3363,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "607:7:17",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "585:38:17"
            },
            "returnParameters": {
              "id": 3366,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "641:0:17"
            },
            "scope": 3375,
            "src": "568:124:17",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 3376,
        "src": "348:347:17",
        "usedErrors": []
      }
    ],
    "src": "33:664:17"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.13+commit.abaa5c0e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-05-31T12:35:27.763Z",
  "devdoc": {
    "author": "Julien Wolff Tristan Boettger   ",
    "kind": "dev",
    "methods": {
      "testMint(address,uint256)": {
        "params": {
          "_address": "addres du SC RatRaceNFT.sol",
          "_amount": "qty to mint"
        }
      }
    },
    "title": "Contract testTxOrigin   ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "testMint(address,uint256)": {
        "notice": "this fonction test a require in RatRaceNFT.sol  "
      }
    },
    "notice": "this is a test contract. It tests the require tx.origin == msg.sender    of the mintNFT function of our smart contract RatRaceNFT.sol ",
    "version": 1
  }
}